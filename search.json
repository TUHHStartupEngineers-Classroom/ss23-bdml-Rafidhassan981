[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_ml_fundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "6.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n    select(symbol, date, adjusted) %&gt;%          \n    filter(date &gt;= \"2018-01-01\") %&gt;%            \n    group_by(symbol) %&gt;% \n    mutate(adj_lag = lag(adjusted)) %&gt;% \n    filter(!is.na(adj_lag)) %&gt;% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %&gt;% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_ml_fundamentals.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.2 Step 2 - Convert to User-Item Format",
    "text": "6.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_ml_fundamentals.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.3 Step 3 - Perform K-Means Clustering",
    "text": "6.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\n\n  \n\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %&gt;% glance()\n\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_ml_fundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.4 Step 4 - Find the optimal value of K",
    "text": "6.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n    mutate(k_means = centers %&gt;% map(kmeans_mapper),\n           glance = k_means %&gt;% map(glance))\n\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    select(centers, tot.withinss) %&gt;%\n    \n    # Visualization\n    ggplot(aes(centers, tot.withinss)) +\n    geom_point(color = \"#2DC6D6\", size = 4) +\n    geom_line(color = \"#2DC6D6\", size = 1) +\n    # Add labels (which are repelled a little)\n    ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n    \n    # Formatting\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the customer are from the closes K-Means center\",\n    caption = \"Conclusion: Based on the Scree Plot, we select 3 clusters to segment the customer base.\")\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.5 Step 5 - Apply UMAP",
    "text": "6.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/k_means_mapped_tbl.rds\")\nk_means_mapped_tbl\n\n\n\n  \n\n\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results &lt;-\n    subset(stock_date_matrix_tbl, select = -symbol) %&gt;%\n    umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n    as_tibble(.name_repair = \"unique\") %&gt;% # argument is required to set names in the next step\n    set_names(c(\"x\", \"y\")) %&gt;%\n    bind_cols(\n        stock_date_matrix_tbl %&gt;% select(symbol)\n    )\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\n# Output: umap_results_tbl\numap_results_tbl\n\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n    ggplot(aes(x, y)) +\n    geom_point(alpha=0.5) + \n    ggrepel::geom_label_repel(aes(label = symbol), size = 2) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\") \n\n#&gt; Warning: ggrepel: 499 unlabeled data points (too many overlaps). Consider\n#&gt; increasing max.overlaps\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_ml_fundamentals.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n6.6 Step 6 - Combine K-Means and UMAP",
    "text": "6.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/umap_results_tbl.rds\")\numap_results_tbl \n\n\n\n  \n\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n    pull(k_means) %&gt;%\n    pluck(3)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\nkmeans_10_clusters_tbl &lt;- k_means_obj %&gt;% \n    augment(stock_date_matrix_tbl) %&gt;%\n    # Select the data we need\n    select(symbol, .cluster)\nsp_500_index_tbl_result &lt;-sp_500_index_tbl %&gt;% select(symbol, company, sector)\numap_kmeans_results_tbl &lt;- umap_results_tbl %&gt;%\n    left_join(kmeans_10_clusters_tbl,by=\"symbol\") %&gt;%\n    left_join(sp_500_index_tbl_result,by=\"symbol\")\n\n# Output: umap_kmeans_results_tbl \ntypeof(palette_light() %&gt;% sample(3))\n\n#&gt; [1] \"character\"\n\ntypeof(c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\"))\n\n#&gt; [1] \"character\"\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%\n    mutate(label_text = str_glue(\"SYMBOL: {symbol}\n                                 Cluster: {.cluster}\")) %&gt;%\n    \n    ggplot(aes(V1, V2, color = .cluster)) +\n    # Geometries\n    geom_point(alpha=0.5) +\n    # Formatting\n    scale_color_manual(values= c(\"#2d72d6\", \"#2dc6d6\", \"#2dd692\")) +\n    labs(title = \"Company Segmentation: 2D Projection\",\n    subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_ml_supervised.html",
    "href": "content/01_journal/02_ml_supervised.html",
    "title": "02 Supervised ML",
    "section": "",
    "text": "library(tidymodels)\nlibrary(broom.mixed)\nlibrary(xgboost)\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\nlibrary(modeldata)\n# Data exploration\nbike_data_tbl &lt;- readRDS(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/bike_orderlines.rds\")\nmodel_sales_tbl &lt;- bike_data_tbl %&gt;%\n  select(total_price, model, category_2, frame_material) %&gt;%\n  \n  group_by(model, category_2, frame_material) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  arrange(desc(total_sales))\n\n#&gt; `summarise()` has grouped output by 'model', 'category_2'. You can override\n#&gt; using the `.groups` argument.\n\nmodel_sales_tbl %&gt;%\n  mutate(category_2 = as_factor(category_2) %&gt;% \n           fct_reorder(total_sales, .fun = max) %&gt;% \n           fct_rev()) %&gt;%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  #coord_flip() +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(\n    title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\"\n  )\n\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\n\n#&gt; Warning: Groups with fewer than two data points have been dropped.\n#&gt; Groups with fewer than two data points have been dropped.\n#&gt; Groups with fewer than two data points have been dropped.\n\n\n#&gt; Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#&gt; Warning: Computation failed in `stat_ydensity()`\n#&gt; Caused by error in `$&lt;-.data.frame`:\n#&gt; ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\nbike_features_tbl &lt;- readRDS(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(\n    `shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n  ) %&gt;%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  mutate(id = row_number()) %&gt;% \n  mutate(frame_material = factor(frame_material)) %&gt;%\n  select(id, everything()) \nbike_features_tbl %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\ntrain_data &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n# recipe\nbike_rec &lt;- \n  recipe(frame_material ~ ., data = train_data) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) \nd &lt;- summary(bike_rec)\nlr_mod &lt;- \n  logistic_reg() %&gt;% \n  set_engine(\"glm\")\nlr_mod\n\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(bike_rec)\nbike_wflow\n\n#&gt; ══ Workflow ════════════════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_fit &lt;- \n  bike_wflow %&gt;% \n  fit(data = train_data)\n\n#&gt; Warning: glm.fit: algorithm did not converge\n\n\n#&gt; Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#&gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;                (Intercept)                          id  \n#&gt;                  171.07141                     0.42706  \n#&gt;                     weight                       price  \n#&gt;                  -22.93923                     0.06928  \n#&gt;           shimano_dura_ace             shimano_ultegra  \n#&gt;                 -271.96832                   -25.09137  \n#&gt;                shimano_105              shimano_tiagra  \n#&gt;                    8.81318                    19.10245  \n#&gt;              shimano_deore                 shimano_slx  \n#&gt;                   56.50464                    37.73447  \n#&gt;                shimano_grx                  Shimano_xt  \n#&gt;                   47.51743                   -24.12717  \n#&gt;              Shimano_saint                    SRAM_red  \n#&gt;                  133.55166                  -263.87182  \n#&gt;                 SRAM_force                  SRAM_rival  \n#&gt;                  -61.89809                     7.38995  \n#&gt;                  SRAM_apex                    SRAM_xx1  \n#&gt;                    5.41786                   -87.50277  \n#&gt;                   SRAM_x01                     SRAM_gx  \n#&gt;                  -24.18416                    33.79305  \n#&gt;                    SRAM_nx                     SRAM_sx  \n#&gt;                   57.56875                    25.86707  \n#&gt;    Campagnolo_super_record               shimano_nexus  \n#&gt;                 -347.22108                    17.86848  \n#&gt;             shimano_alfine           category_1_Gravel  \n#&gt;                  -34.47279                  -232.11142  \n#&gt;   category_1_Hybrid...City         category_1_Mountain  \n#&gt;                 -124.58264                  -148.97297  \n#&gt;            category_1_Road         category_2_All.Road  \n#&gt;                 -115.70433                   146.21204  \n#&gt;            category_2_City    category_2_Cross.Country  \n#&gt;                  -36.51805                   -27.95474  \n#&gt;      category_2_Cyclocross        category_2_Dirt.Jump  \n#&gt;                  -22.90933                    29.71279  \n#&gt;        category_2_Downhill           category_2_E.City  \n#&gt;                 -134.22795                   -35.17564  \n#&gt;       category_2_E.Fitness         category_2_E.Gravel  \n#&gt;                 -206.14797                  -182.45978  \n#&gt;      category_2_E.Mountain           category_2_E.Road  \n#&gt;                    3.69630                  -128.24839  \n#&gt;      category_2_E.Trekking        category_2_Endurance  \n#&gt;                         NA                    -0.92711  \n#&gt;          category_2_Enduro        category_2_Fat.Bikes  \n#&gt;                  -12.96369                    74.39925  \n#&gt;            category_2_Race          category_2_Touring  \n#&gt;                  -53.83516                          NA  \n#&gt; \n#&gt; ...\n#&gt; and 34 more lines.\n\nbike_fit %&gt;% \n  pull_workflow_fit() %&gt;% \n  tidy()\n\n#&gt; Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#&gt; ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_pred &lt;- \n  predict(bike_fit, test_data, type=\"prob\") %&gt;% \n  bind_cols(test_data %&gt;% select(frame_material, category_2)) \n\n#&gt; Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#&gt; prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nbike_pred %&gt;% \n  roc_curve(truth = frame_material, .pred_aluminium) %&gt;% \n  autoplot()\n\n\n\n\n\n\nbike_pred %&gt;% \n  roc_curve(truth = frame_material, .pred_carbon) %&gt;% \n  autoplot()\n\n\n\n\n\n\nbike_pred\n\n\n\n  \n\n\nroc_al &lt;- bike_pred %&gt;% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car &lt;- bike_pred %&gt;% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n# Evaluation\nmodel_01_linear_lm_simple &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#&gt; parsnip model object\n#&gt; \n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;              (Intercept)        category_2All-Road            category_2City  \n#&gt;                   1974.5                    -583.9                   -1218.0  \n#&gt;  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#&gt;                    202.6                    -627.9                    -708.8  \n#&gt;       category_2Downhill          category_2E-City       category_2E-Fitness  \n#&gt;                   1591.4                     871.5                    1067.9  \n#&gt;       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#&gt;                   1345.0                    1268.5                     944.5  \n#&gt;     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#&gt;                   1490.5                    -346.9                     366.6  \n#&gt;      category_2Fat Bikes            category_2Race         category_2Touring  \n#&gt;                  -1460.0                     747.9                    -803.0  \n#&gt;          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#&gt;                   -301.6                     456.4                    1869.5\n\ntest_data &lt;- test_data %&gt;% filter(category_2 != \"Fat Bikes\")\nyards &lt;- model_01_linear_lm_simple\nyards\n\n#&gt; parsnip model object\n#&gt; \n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;              (Intercept)        category_2All-Road            category_2City  \n#&gt;                   1974.5                    -583.9                   -1218.0  \n#&gt;  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#&gt;                    202.6                    -627.9                    -708.8  \n#&gt;       category_2Downhill          category_2E-City       category_2E-Fitness  \n#&gt;                   1591.4                     871.5                    1067.9  \n#&gt;       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#&gt;                   1345.0                    1268.5                     944.5  \n#&gt;     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#&gt;                   1490.5                    -346.9                     366.6  \n#&gt;      category_2Fat Bikes            category_2Race         category_2Touring  \n#&gt;                  -1460.0                     747.9                    -803.0  \n#&gt;          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#&gt;                   -301.6                     456.4                    1869.5\n\ng1 &lt;- bike_features_tbl %&gt;% \n  mutate(category_2 = as.factor(category_2) %&gt;% \n           fct_reorder(price)) %&gt;% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs(\n    title = \"Unit Price for Each Model\",\n    y = \"\", x = \"Category 2\"\n  )\ng1\n\n#&gt; Warning: Groups with fewer than two data points have been dropped.\n\n\n#&gt; Warning: Groups with fewer than two data points have been dropped.\n#&gt; Groups with fewer than two data points have been dropped.\n\n\n\n\n\n\n\nnew_race_alu &lt;- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Race\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_race_alu\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_race_alu)\n\n\n\n  \n\n\nmodels_tbl &lt;- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_race_alu_tbl &lt;- models_tbl %&gt;%\n  mutate(predictions = map(model, predict, new_data = new_race_alu)) %&gt;%\n  unnest(predictions) %&gt;%\n  mutate(category_2 = \"Race\") %&gt;%\n  left_join(new_race_alu, by = \"category_2\")\npredictions_new_race_alu_tbl\n\n\n\n  \n\n\ng2 &lt;- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_race_alu_tbl) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 3,\n                           data = predictions_new_race_alu_tbl)\ng2\n\n#&gt; Warning: Groups with fewer than two data points have been dropped.\n#&gt; Groups with fewer than two data points have been dropped.\n#&gt; Groups with fewer than two data points have been dropped."
  },
  {
    "objectID": "content/01_journal/05_ml_lime.html",
    "href": "content/01_journal/05_ml_lime.html",
    "title": "05 LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \nlibrary(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(broom.mixed)\nlibrary(h2o)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\n\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    &lt;- read_excel(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\n# Processing Pipeline\nsource(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/00_Scripts/data_processing_pipeline.R\")\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\nrecipe_obj\n\n#&gt; \n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; ── Inputs \n#&gt; Number of variables by role\n#&gt; outcome:    1\n#&gt; predictor: 34\n#&gt; \n#&gt; ── Training information \n#&gt; Training data contained 1249 data points and no incomplete rows.\n#&gt; \n#&gt; ── Operations \n#&gt; • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#&gt; • Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         7 hours 51 minutes \n#&gt;     H2O cluster timezone:       Asia/Kolkata \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 20 days \n#&gt;     H2O cluster name:           H2O_started_from_R_RAFID_drs368 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   0.60 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nautoml_leader &lt;- h2o.loadModel(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/h20_models/StackedEnsemble_BestOfFamily_4_AutoML_1_20230617_212610\")\nautoml_leader\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_1_20230617_212610 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              2/5\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4  # DeepLearning base models (used / total)              0/1\n#&gt; 5           # GLM base models (used / total)              1/1\n#&gt; 6           # DRF base models (used / total)              0/2\n#&gt; 7                      Metalearner algorithm              GLM\n#&gt; 8         Metalearner fold assignment scheme           Random\n#&gt; 9                         Metalearner nfolds                5\n#&gt; 10                   Metalearner fold_column               NA\n#&gt; 11        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.05539441\n#&gt; RMSE:  0.2353602\n#&gt; LogLoss:  0.2068378\n#&gt; Mean Per-Class Error:  0.1422336\n#&gt; AUC:  0.9351503\n#&gt; AUCPR:  0.8478452\n#&gt; Gini:  0.8703006\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error      Rate\n#&gt; No     885  24 0.026403   =24/909\n#&gt; Yes     40 115 0.258065   =40/155\n#&gt; Totals 925 139 0.060150  =64/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.384131   0.782313 113\n#&gt; 2                       max f2  0.249894   0.788177 153\n#&gt; 3                 max f0point5  0.538996   0.850467  79\n#&gt; 4                 max accuracy  0.413118   0.940789 108\n#&gt; 5                max precision  0.979383   1.000000   0\n#&gt; 6                   max recall  0.004057   1.000000 391\n#&gt; 7              max specificity  0.979383   1.000000   0\n#&gt; 8             max absolute_mcc  0.413118   0.749738 108\n#&gt; 9   max min_per_class_accuracy  0.195230   0.870968 182\n#&gt; 10 max mean_per_class_accuracy  0.249894   0.877700 153\n#&gt; 11                     max tns  0.979383 909.000000   0\n#&gt; 12                     max fns  0.979383 154.000000   0\n#&gt; 13                     max fps  0.000372 909.000000 399\n#&gt; 14                     max tps  0.004057 155.000000 391\n#&gt; 15                     max tnr  0.979383   1.000000   0\n#&gt; 16                     max fnr  0.979383   0.993548   0\n#&gt; 17                     max fpr  0.000372   1.000000 399\n#&gt; 18                     max tpr  0.004057   1.000000 391\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.1014588\n#&gt; RMSE:  0.318526\n#&gt; LogLoss:  0.3349473\n#&gt; Mean Per-Class Error:  0.1894021\n#&gt; AUC:  0.8702112\n#&gt; AUCPR:  0.7311083\n#&gt; Gini:  0.7404225\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error     Rate\n#&gt; No     130  17 0.115646  =17/147\n#&gt; Yes     10  28 0.263158   =10/38\n#&gt; Totals 140  45 0.145946  =27/185\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.277435   0.674699  44\n#&gt; 2                       max f2  0.094474   0.711297  86\n#&gt; 3                 max f0point5  0.528720   0.745614  18\n#&gt; 4                 max accuracy  0.528720   0.875676  18\n#&gt; 5                max precision  0.944700   1.000000   0\n#&gt; 6                   max recall  0.014675   1.000000 144\n#&gt; 7              max specificity  0.944700   1.000000   0\n#&gt; 8             max absolute_mcc  0.277435   0.584937  44\n#&gt; 9   max min_per_class_accuracy  0.169340   0.775510  62\n#&gt; 10 max mean_per_class_accuracy  0.277435   0.810598  44\n#&gt; 11                     max tns  0.944700 147.000000   0\n#&gt; 12                     max fns  0.944700  37.000000   0\n#&gt; 13                     max fps  0.000937 147.000000 184\n#&gt; 14                     max tps  0.014675  38.000000 144\n#&gt; 15                     max tnr  0.944700   1.000000   0\n#&gt; 16                     max fnr  0.944700   0.973684   0\n#&gt; 17                     max fpr  0.000937   1.000000 184\n#&gt; 18                     max tpr  0.014675   1.000000 144\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.08452572\n#&gt; RMSE:  0.2907331\n#&gt; LogLoss:  0.3009892\n#&gt; Mean Per-Class Error:  0.2155222\n#&gt; AUC:  0.8424394\n#&gt; AUCPR:  0.6125689\n#&gt; Gini:  0.6848788\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error       Rate\n#&gt; No     828  81 0.089109    =81/909\n#&gt; Yes     53 102 0.341935    =53/155\n#&gt; Totals 881 183 0.125940  =134/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.279959   0.603550 142\n#&gt; 2                       max f2  0.184412   0.644068 194\n#&gt; 3                 max f0point5  0.463236   0.650096  77\n#&gt; 4                 max accuracy  0.463236   0.895677  77\n#&gt; 5                max precision  0.973548   1.000000   0\n#&gt; 6                   max recall  0.000423   1.000000 399\n#&gt; 7              max specificity  0.973548   1.000000   0\n#&gt; 8             max absolute_mcc  0.371918   0.544338 102\n#&gt; 9   max min_per_class_accuracy  0.148845   0.777778 221\n#&gt; 10 max mean_per_class_accuracy  0.267015   0.786529 149\n#&gt; 11                     max tns  0.973548 909.000000   0\n#&gt; 12                     max fns  0.973548 154.000000   0\n#&gt; 13                     max fps  0.000423 909.000000 399\n#&gt; 14                     max tps  0.000423 155.000000 399\n#&gt; 15                     max tnr  0.973548   1.000000   0\n#&gt; 16                     max fnr  0.973548   0.993548   0\n#&gt; 17                     max fpr  0.000423   1.000000 399\n#&gt; 18                     max tpr  0.000423   1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy   0.898050 0.016373   0.913876   0.887805   0.876652   0.914141\n#&gt; auc        0.848466 0.061311   0.864049   0.930791   0.803215   0.870002\n#&gt; err        0.101950 0.016373   0.086124   0.112195   0.123348   0.085859\n#&gt; err_count 21.800000 4.438468  18.000000  23.000000  28.000000  17.000000\n#&gt; f0point5   0.652713 0.092724   0.673077   0.596591   0.522388   0.740741\n#&gt;           cv_5_valid\n#&gt; accuracy    0.897778\n#&gt; auc         0.774275\n#&gt; err         0.102222\n#&gt; err_count  23.000000\n#&gt; f0point5    0.730769\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.671519  0.124682   0.656250   0.567568   0.538462\n#&gt; r2                  0.318802  0.090969   0.357078   0.400943   0.187886\n#&gt; recall              0.622366  0.134458   0.750000   0.750000   0.466667\n#&gt; residual_deviance 127.051384 29.368950 110.658340  97.378880 143.471310\n#&gt; rmse                0.290137  0.023150   0.273118   0.265794   0.305194\n#&gt; specificity         0.946120  0.026496   0.939226   0.909605   0.939086\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.769231   0.826087\n#&gt; r2                  0.386080   0.262025\n#&gt; recall              0.645161   0.500000\n#&gt; residual_deviance 113.661560 170.086840\n#&gt; rmse                0.284728   0.321848\n#&gt; specificity         0.964072   0.978610\n\n\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\npredictions_tbl &lt;- automl_leader %&gt;%\n    h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n    as.tibble() %&gt;%\n    bind_cols(\n        test_tbl %&gt;%\n            select(EducationField)\n    )\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n\n\n  \n\n\ntest_tbl %&gt;%\n  slice(1) %&gt;%\n  glimpse()\n\n#&gt; Rows: 1\n#&gt; Columns: 32\n#&gt; $ Age                      &lt;dbl&gt; 59\n#&gt; $ BusinessTravel           &lt;fct&gt; Travel_Rarely\n#&gt; $ DailyRate                &lt;dbl&gt; 1324\n#&gt; $ Department               &lt;fct&gt; Research & Development\n#&gt; $ DistanceFromHome         &lt;dbl&gt; 3\n#&gt; $ Education                &lt;fct&gt; Bachelor\n#&gt; $ EducationField           &lt;fct&gt; Medical\n#&gt; $ EmployeeNumber           &lt;dbl&gt; 10\n#&gt; $ EnvironmentSatisfaction  &lt;fct&gt; High\n#&gt; $ Gender                   &lt;fct&gt; Female\n#&gt; $ HourlyRate               &lt;dbl&gt; 81\n#&gt; $ JobInvolvement           &lt;fct&gt; Very High\n#&gt; $ JobLevel                 &lt;fct&gt; 1\n#&gt; $ JobRole                  &lt;fct&gt; Laboratory Technician\n#&gt; $ JobSatisfaction          &lt;fct&gt; Low\n#&gt; $ MaritalStatus            &lt;fct&gt; Married\n#&gt; $ MonthlyIncome            &lt;dbl&gt; 2670\n#&gt; $ MonthlyRate              &lt;dbl&gt; 9964\n#&gt; $ NumCompaniesWorked       &lt;dbl&gt; 4\n#&gt; $ OverTime                 &lt;fct&gt; Yes\n#&gt; $ PercentSalaryHike        &lt;dbl&gt; 20\n#&gt; $ PerformanceRating        &lt;fct&gt; Outstanding\n#&gt; $ RelationshipSatisfaction &lt;fct&gt; Low\n#&gt; $ StockOptionLevel         &lt;fct&gt; 3\n#&gt; $ TotalWorkingYears        &lt;dbl&gt; 12\n#&gt; $ TrainingTimesLastYear    &lt;dbl&gt; 3\n#&gt; $ WorkLifeBalance          &lt;fct&gt; Good\n#&gt; $ YearsAtCompany           &lt;dbl&gt; 1\n#&gt; $ YearsInCurrentRole       &lt;dbl&gt; 0\n#&gt; $ YearsSinceLastPromotion  &lt;dbl&gt; 0\n#&gt; $ YearsWithCurrManager     &lt;dbl&gt; 0\n#&gt; $ Attrition                &lt;fct&gt; No\n\n# # 3.2 Single Explanation ----\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplainer\n\n#&gt; $model\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_1_20230617_212610 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              2/5\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4  # DeepLearning base models (used / total)              0/1\n#&gt; 5           # GLM base models (used / total)              1/1\n#&gt; 6           # DRF base models (used / total)              0/2\n#&gt; 7                      Metalearner algorithm              GLM\n#&gt; 8         Metalearner fold assignment scheme           Random\n#&gt; 9                         Metalearner nfolds                5\n#&gt; 10                   Metalearner fold_column               NA\n#&gt; 11        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.05539441\n#&gt; RMSE:  0.2353602\n#&gt; LogLoss:  0.2068378\n#&gt; Mean Per-Class Error:  0.1422336\n#&gt; AUC:  0.9351503\n#&gt; AUCPR:  0.8478452\n#&gt; Gini:  0.8703006\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error      Rate\n#&gt; No     885  24 0.026403   =24/909\n#&gt; Yes     40 115 0.258065   =40/155\n#&gt; Totals 925 139 0.060150  =64/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.384131   0.782313 113\n#&gt; 2                       max f2  0.249894   0.788177 153\n#&gt; 3                 max f0point5  0.538996   0.850467  79\n#&gt; 4                 max accuracy  0.413118   0.940789 108\n#&gt; 5                max precision  0.979383   1.000000   0\n#&gt; 6                   max recall  0.004057   1.000000 391\n#&gt; 7              max specificity  0.979383   1.000000   0\n#&gt; 8             max absolute_mcc  0.413118   0.749738 108\n#&gt; 9   max min_per_class_accuracy  0.195230   0.870968 182\n#&gt; 10 max mean_per_class_accuracy  0.249894   0.877700 153\n#&gt; 11                     max tns  0.979383 909.000000   0\n#&gt; 12                     max fns  0.979383 154.000000   0\n#&gt; 13                     max fps  0.000372 909.000000 399\n#&gt; 14                     max tps  0.004057 155.000000 391\n#&gt; 15                     max tnr  0.979383   1.000000   0\n#&gt; 16                     max fnr  0.979383   0.993548   0\n#&gt; 17                     max fpr  0.000372   1.000000 399\n#&gt; 18                     max tpr  0.004057   1.000000 391\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.1014588\n#&gt; RMSE:  0.318526\n#&gt; LogLoss:  0.3349473\n#&gt; Mean Per-Class Error:  0.1894021\n#&gt; AUC:  0.8702112\n#&gt; AUCPR:  0.7311083\n#&gt; Gini:  0.7404225\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error     Rate\n#&gt; No     130  17 0.115646  =17/147\n#&gt; Yes     10  28 0.263158   =10/38\n#&gt; Totals 140  45 0.145946  =27/185\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.277435   0.674699  44\n#&gt; 2                       max f2  0.094474   0.711297  86\n#&gt; 3                 max f0point5  0.528720   0.745614  18\n#&gt; 4                 max accuracy  0.528720   0.875676  18\n#&gt; 5                max precision  0.944700   1.000000   0\n#&gt; 6                   max recall  0.014675   1.000000 144\n#&gt; 7              max specificity  0.944700   1.000000   0\n#&gt; 8             max absolute_mcc  0.277435   0.584937  44\n#&gt; 9   max min_per_class_accuracy  0.169340   0.775510  62\n#&gt; 10 max mean_per_class_accuracy  0.277435   0.810598  44\n#&gt; 11                     max tns  0.944700 147.000000   0\n#&gt; 12                     max fns  0.944700  37.000000   0\n#&gt; 13                     max fps  0.000937 147.000000 184\n#&gt; 14                     max tps  0.014675  38.000000 144\n#&gt; 15                     max tnr  0.944700   1.000000   0\n#&gt; 16                     max fnr  0.944700   0.973684   0\n#&gt; 17                     max fpr  0.000937   1.000000 184\n#&gt; 18                     max tpr  0.014675   1.000000 144\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.08452572\n#&gt; RMSE:  0.2907331\n#&gt; LogLoss:  0.3009892\n#&gt; Mean Per-Class Error:  0.2155222\n#&gt; AUC:  0.8424394\n#&gt; AUCPR:  0.6125689\n#&gt; Gini:  0.6848788\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error       Rate\n#&gt; No     828  81 0.089109    =81/909\n#&gt; Yes     53 102 0.341935    =53/155\n#&gt; Totals 881 183 0.125940  =134/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.279959   0.603550 142\n#&gt; 2                       max f2  0.184412   0.644068 194\n#&gt; 3                 max f0point5  0.463236   0.650096  77\n#&gt; 4                 max accuracy  0.463236   0.895677  77\n#&gt; 5                max precision  0.973548   1.000000   0\n#&gt; 6                   max recall  0.000423   1.000000 399\n#&gt; 7              max specificity  0.973548   1.000000   0\n#&gt; 8             max absolute_mcc  0.371918   0.544338 102\n#&gt; 9   max min_per_class_accuracy  0.148845   0.777778 221\n#&gt; 10 max mean_per_class_accuracy  0.267015   0.786529 149\n#&gt; 11                     max tns  0.973548 909.000000   0\n#&gt; 12                     max fns  0.973548 154.000000   0\n#&gt; 13                     max fps  0.000423 909.000000 399\n#&gt; 14                     max tps  0.000423 155.000000 399\n#&gt; 15                     max tnr  0.973548   1.000000   0\n#&gt; 16                     max fnr  0.973548   0.993548   0\n#&gt; 17                     max fpr  0.000423   1.000000 399\n#&gt; 18                     max tpr  0.000423   1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy   0.898050 0.016373   0.913876   0.887805   0.876652   0.914141\n#&gt; auc        0.848466 0.061311   0.864049   0.930791   0.803215   0.870002\n#&gt; err        0.101950 0.016373   0.086124   0.112195   0.123348   0.085859\n#&gt; err_count 21.800000 4.438468  18.000000  23.000000  28.000000  17.000000\n#&gt; f0point5   0.652713 0.092724   0.673077   0.596591   0.522388   0.740741\n#&gt;           cv_5_valid\n#&gt; accuracy    0.897778\n#&gt; auc         0.774275\n#&gt; err         0.102222\n#&gt; err_count  23.000000\n#&gt; f0point5    0.730769\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.671519  0.124682   0.656250   0.567568   0.538462\n#&gt; r2                  0.318802  0.090969   0.357078   0.400943   0.187886\n#&gt; recall              0.622366  0.134458   0.750000   0.750000   0.466667\n#&gt; residual_deviance 127.051384 29.368950 110.658340  97.378880 143.471310\n#&gt; rmse                0.290137  0.023150   0.273118   0.265794   0.305194\n#&gt; specificity         0.946120  0.026496   0.939226   0.909605   0.939086\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.769231   0.826087\n#&gt; r2                  0.386080   0.262025\n#&gt; recall              0.645161   0.500000\n#&gt; residual_deviance 113.661560 170.086840\n#&gt; rmse                0.284728   0.321848\n#&gt; specificity         0.964072   0.978610\n#&gt; \n#&gt; $preprocess\n#&gt; function (x) \n#&gt; x\n#&gt; &lt;bytecode: 0x0000029d880e38e0&gt;\n#&gt; &lt;environment: 0x0000029d880cd350&gt;\n#&gt; \n#&gt; $bin_continuous\n#&gt; [1] TRUE\n#&gt; \n#&gt; $n_bins\n#&gt; [1] 4\n#&gt; \n#&gt; $quantile_bins\n#&gt; [1] TRUE\n#&gt; \n#&gt; $use_density\n#&gt; [1] TRUE\n#&gt; \n#&gt; $feature_type\n#&gt;                      Age           BusinessTravel                DailyRate \n#&gt;                \"numeric\"                 \"factor\"                \"numeric\" \n#&gt;               Department         DistanceFromHome                Education \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;           EducationField           EmployeeNumber  EnvironmentSatisfaction \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;                   Gender               HourlyRate           JobInvolvement \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;                 JobLevel                  JobRole          JobSatisfaction \n#&gt;                 \"factor\"                 \"factor\"                 \"factor\" \n#&gt;            MaritalStatus            MonthlyIncome              MonthlyRate \n#&gt;                 \"factor\"                \"numeric\"                \"numeric\" \n#&gt;       NumCompaniesWorked                 OverTime        PercentSalaryHike \n#&gt;                \"numeric\"                 \"factor\"                \"numeric\" \n#&gt;        PerformanceRating RelationshipSatisfaction         StockOptionLevel \n#&gt;                 \"factor\"                 \"factor\"                 \"factor\" \n#&gt;        TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n#&gt;                \"numeric\"                \"numeric\"                 \"factor\" \n#&gt;           YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n#&gt;                \"numeric\"                \"numeric\"                \"numeric\" \n#&gt;     YearsWithCurrManager \n#&gt;                \"numeric\" \n#&gt; \n#&gt; $bin_cuts\n#&gt; $bin_cuts$Age\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   18   30   36   43   60 \n#&gt; \n#&gt; $bin_cuts$BusinessTravel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$DailyRate\n#&gt;   0%  25%  50%  75% 100% \n#&gt;  102  465  797 1147 1499 \n#&gt; \n#&gt; $bin_cuts$Department\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$DistanceFromHome\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    1    2    7   14   29 \n#&gt; \n#&gt; $bin_cuts$Education\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$EducationField\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$EmployeeNumber\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    1  511 1040 1573 2065 \n#&gt; \n#&gt; $bin_cuts$EnvironmentSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$Gender\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$HourlyRate\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   30   49   66   83  100 \n#&gt; \n#&gt; $bin_cuts$JobInvolvement\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobLevel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobRole\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$MaritalStatus\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$MonthlyIncome\n#&gt;    0%   25%   50%   75%  100% \n#&gt;  1051  2929  4908  8474 19999 \n#&gt; \n#&gt; $bin_cuts$MonthlyRate\n#&gt;    0%   25%   50%   75%  100% \n#&gt;  2094  8423 14470 20689 26968 \n#&gt; \n#&gt; $bin_cuts$NumCompaniesWorked\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    1    2    4    9 \n#&gt; \n#&gt; $bin_cuts$OverTime\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$PercentSalaryHike\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   11   12   14   18   25 \n#&gt; \n#&gt; $bin_cuts$PerformanceRating\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$RelationshipSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$StockOptionLevel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$TotalWorkingYears\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    6   10   15   38 \n#&gt; \n#&gt; $bin_cuts$TrainingTimesLastYear\n#&gt;   0%  25%  50% 100% \n#&gt;    0    2    3    6 \n#&gt; \n#&gt; $bin_cuts$WorkLifeBalance\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$YearsAtCompany\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    3    5    9   37 \n#&gt; \n#&gt; $bin_cuts$YearsInCurrentRole\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    2    3    7   18 \n#&gt; \n#&gt; $bin_cuts$YearsSinceLastPromotion\n#&gt;   0%  50%  75% 100% \n#&gt;    0    1    2   15 \n#&gt; \n#&gt; $bin_cuts$YearsWithCurrManager\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    2    3    7   17 \n#&gt; \n#&gt; \n#&gt; $feature_distribution\n#&gt; $feature_distribution$Age\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2602082 0.2834267 0.2217774 0.2345877 \n#&gt; \n#&gt; $feature_distribution$BusinessTravel\n#&gt; \n#&gt;        Non-Travel Travel_Frequently     Travel_Rarely \n#&gt;         0.1000801         0.1817454         0.7181745 \n#&gt; \n#&gt; $feature_distribution$DailyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2514011 0.2489992 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$Department\n#&gt; \n#&gt;        Human Resources Research & Development                  Sales \n#&gt;             0.04323459             0.65092074             0.30584468 \n#&gt; \n#&gt; $feature_distribution$DistanceFromHome\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2954363 0.2369896 0.2241793 0.2433947 \n#&gt; \n#&gt; $feature_distribution$Education\n#&gt; \n#&gt; Below College       College      Bachelor        Master        Doctor \n#&gt;    0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n#&gt; \n#&gt; $feature_distribution$EducationField\n#&gt; \n#&gt;  Human Resources    Life Sciences        Marketing          Medical \n#&gt;       0.01761409       0.41793435       0.10888711       0.31144916 \n#&gt;            Other Technical Degree \n#&gt;       0.05444355       0.08967174 \n#&gt; \n#&gt; $feature_distribution$EmployeeNumber\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$EnvironmentSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1913531 0.1961569 0.3018415 0.3106485 \n#&gt; \n#&gt; $feature_distribution$Gender\n#&gt; \n#&gt;    Female      Male \n#&gt; 0.4123299 0.5876701 \n#&gt; \n#&gt; $feature_distribution$HourlyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2618094 0.2473979 0.2449960 0.2457966 \n#&gt; \n#&gt; $feature_distribution$JobInvolvement\n#&gt; \n#&gt;        Low     Medium       High  Very High \n#&gt; 0.05684548 0.25780624 0.58927142 0.09607686 \n#&gt; \n#&gt; $feature_distribution$JobLevel\n#&gt; \n#&gt;          1          2          3          4          5 \n#&gt; 0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n#&gt; \n#&gt; $feature_distribution$JobRole\n#&gt; \n#&gt; Healthcare Representative           Human Resources     Laboratory Technician \n#&gt;                0.08646918                0.03682946                0.18174540 \n#&gt;                   Manager    Manufacturing Director         Research Director \n#&gt;                0.06885508                0.09927942                0.05924740 \n#&gt;        Research Scientist           Sales Executive      Sales Representative \n#&gt;                0.18654924                0.22337870                0.05764612 \n#&gt; \n#&gt; $feature_distribution$JobSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1873499 0.1985588 0.3018415 0.3122498 \n#&gt; \n#&gt; $feature_distribution$MaritalStatus\n#&gt; \n#&gt;  Divorced   Married    Single \n#&gt; 0.2121697 0.4571657 0.3306645 \n#&gt; \n#&gt; $feature_distribution$MonthlyIncome\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$MonthlyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$NumCompaniesWorked\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.48118495 0.09927942 0.20496397 0.21457166 \n#&gt; \n#&gt; $feature_distribution$OverTime\n#&gt; \n#&gt;        No       Yes \n#&gt; 0.7165733 0.2834267 \n#&gt; \n#&gt; $feature_distribution$PercentSalaryHike\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2866293 0.2738191 0.2289832 0.2105685 \n#&gt; \n#&gt; $feature_distribution$PerformanceRating\n#&gt; \n#&gt;         Low        Good   Excellent Outstanding \n#&gt;   0.0000000   0.0000000   0.8414732   0.1585268 \n#&gt; \n#&gt; $feature_distribution$RelationshipSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1889512 0.2161729 0.3018415 0.2930344 \n#&gt; \n#&gt; $feature_distribution$StockOptionLevel\n#&gt; \n#&gt;          0          1          2          3 \n#&gt; 0.43554844 0.40592474 0.10168135 0.05684548 \n#&gt; \n#&gt; $feature_distribution$TotalWorkingYears\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.3050440 0.3306645 0.1224980 0.2417934 \n#&gt; \n#&gt; $feature_distribution$TrainingTimesLastYear\n#&gt; \n#&gt;         1         2         3 \n#&gt; 0.4603683 0.3306645 0.2089672 \n#&gt; \n#&gt; $feature_distribution$WorkLifeBalance\n#&gt; \n#&gt;        Bad       Good     Better       Best \n#&gt; 0.05204163 0.22497998 0.61889512 0.10408327 \n#&gt; \n#&gt; $feature_distribution$YearsAtCompany\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.3226581 0.2137710 0.2217774 0.2417934 \n#&gt; \n#&gt; $feature_distribution$YearsInCurrentRole\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.46757406 0.08726982 0.27542034 0.16973579 \n#&gt; \n#&gt; $feature_distribution$YearsSinceLastPromotion\n#&gt; \n#&gt;         1         2         3 \n#&gt; 0.6413131 0.1120897 0.2465973 \n#&gt; \n#&gt; $feature_distribution$YearsWithCurrManager\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.46357086 0.09767814 0.25300240 0.18574860 \n#&gt; \n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\n?lime::explain\n\n#&gt; starting httpd help server ... done\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n\n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n\n\n  \n\n\nexplanation %&gt;%\n  as.tibble() %&gt;%\n  select(feature:prediction)\n\n\n\n  \n\n\ng &lt;- plot_features(explanation = explanation, ncol = 1)\n\nplot_features(explanation = explanation, ncol = 1)\n\n\n\n\n\n\n# # 3.3 Multiple Explanations ----\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;%\n  as.tibble()\n\n\n\n  \n\n\nplot_features(explanation, ncol = 4)\n\n\n\n\n\n\nplot_explanations(explanation)\n\n\n\n\n\n\n# Challenge part 1 ----\nexplanation %&gt;%\n  as.tibble()\n\n\n\n  \n\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\ncase_1 %&gt;%\n  plot_features()\n\n\n\n\n\n\ncase_1 %&gt;%\n  ggplot(aes(feature_weight, feature)) +\n  geom_col(fill = \"#1a2c50\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_fill_manual(values = c(\"steelblue\", \"firebrick\"), drop = FALSE) +\n  labs(\n    title = (\"Model explanation\"),\n    x = \"Weight\",\n    y = \"Feature\"\n  ) +\n  theme_tq_dark()\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n# # Challenge part 2 ----\nexplanation %&gt;% ggplot(aes_(~case, ~feature_desc)) +\n  geom_tile(aes_(fill = ~feature_weight)) +\n  scale_x_discrete(\"Case\", expand = c(0, 0)) +\n  scale_y_discrete(\"Feature\", expand = c(0, 0)) +\n  scale_fill_gradient2(\"Feature\\nweight\", low = \"firebrick\", mid = \"#f7f7f7\", high = \"steelblue\") +\n  theme(panel.border = element_rect(fill = NA,\n                                    colour = \"grey60\",\n                                    size = 1),\n        panel.grid = element_blank(),\n        legend.position = \"right\",\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +\n  facet_wrap(~label)\n\n#&gt; Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`\n\n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/01_journal/03_ml_auto_ml_h2o.html",
    "href": "content/01_journal/03_ml_auto_ml_h2o.html",
    "title": "03 Automated Machine Learning with H20",
    "section": "",
    "text": "# Business case study Challenge 1\n\n# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\n# Load Data data definitions\nemployee_attrition_tbl &lt;- read_csv(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\npath_data_definitions &lt;- \"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\nemployee_attrition_tbl\n\n\n\n  \n\n\n# Business & Data Understanding: Department and Job Role\n# Data subset\ndept_job_role_tbl &lt;- employee_attrition_tbl %&gt;%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %&gt;%\n  group_by(Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n# Attrition by department\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n# Attrition by job role\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n\n\n  \n\n\n# Develop KPI\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n\n\n  \n\n\n# Function to calculate attrition cost\ncalculate_attrition_cost &lt;- function(\n    # Employee\n  n                    = 1,\n  salary               = 80000,\n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n) {\n  # Direct Costs\n  direct_cost &lt;- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  # Lost Productivity Costs\n  productivity_cost &lt;- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction &lt;- salary / workdays_per_year * workdays_position_open\n  # Estimated Turnover Per Employee\n  cost_per_employee &lt;- direct_cost + productivity_cost - salary_benefit_reduction\n  # Total Cost of Employee Turnover\n  total_cost &lt;- n * cost_per_employee\n  return(total_cost)\n}\ncalculate_attrition_cost()\n\n#&gt; [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#&gt; [1] 15696667\n\n# Use this\n# Function to convert counts to percentages. \ncount_to_pct &lt;- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  return(ret)\n}\n# This is way shorter and more flexibel\ndept_job_role_tbl %&gt;%\n  count(JobRole, Attrition) %&gt;%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole)  \n\n\n\n  \n\n\nassess_attrition &lt;- function(data, attrition_col, attrition_value, baseline_pct) {\n  attrition_col_expr &lt;- enquo(attrition_col)\n  data %&gt;%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %&gt;%\n    arrange(desc(pct)) %&gt;%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct &gt; baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n}\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %&gt;% as_factor()) %&gt;%\n  # Check levels\n  # pull(name) %&gt;%\n  # levels()\n  mutate(name      = fct_reorder(name, cost_of_attrition)) %&gt;%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %&gt;%\n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n# Function to plot attrition\nplot_attrition &lt;- function(data, \n                           ..., \n                           .value,\n                           fct_reorder = TRUE,\n                           fct_rev     = FALSE,\n                           include_lbl = TRUE,\n                           color       = \"#2dc6d6\",\n                           units       = c(\"0\", \"K\", \"M\")) {\n  ### Inputs\n  group_vars_expr   &lt;- quos(...)\n  \n  # If the user does not supply anything, \n  # this takes the first column of the supplied data\n  if (length(group_vars_expr) == 0) {\n    group_vars_expr &lt;- quos(rlang::sym(colnames(data)[[1]]))\n  }\n  value_expr &lt;- enquo(.value)\n  units_val  &lt;- switch(units[[1]],\n                       \"M\" = 1e6,\n                       \"K\" = 1e3,\n                       \"0\" = 1)\n  if (units[[1]] == \"0\") units &lt;- \"\"\n  # Data Manipulation\n  # This is a so called Function Factory (a function that produces a function)\n  usd &lt;- scales::dollar_format(prefix = \"$\", largest_with_cents = 1e3)\n  # Create the axis labels and values for the plot\n  data_manipulated &lt;- data %&gt;%\n    mutate(name = str_c(!!! group_vars_expr, sep = \": \") %&gt;% as_factor()) %&gt;%\n    mutate(value_text = str_c(usd(!! value_expr / units_val),\n                              units[[1]], sep = \"\"))\n  \n  # Order the labels on the y-axis according to the input\n  if (fct_reorder) {\n    data_manipulated &lt;- data_manipulated %&gt;%\n      mutate(name = forcats::fct_reorder(name, !! value_expr)) %&gt;%\n      arrange(name)\n  }\n  if (fct_rev) {\n    data_manipulated &lt;- data_manipulated %&gt;%\n      mutate(name = forcats::fct_rev(name)) %&gt;%\n      arrange(name)\n  }\n  # Visualization\n  g &lt;- data_manipulated %&gt;%\n    # \"name\" is a column name generated by our function internally as part of the data manipulation task\n    ggplot(aes(x = (!! value_expr), y = name)) +\n    geom_segment(aes(xend = 0, yend = name), color = color) +\n    geom_point(aes(size = !! value_expr), color = color) +\n    scale_x_continuous(labels = scales::dollar) +\n    scale_size(range = c(3, 5)) +\n    theme(legend.position = \"none\")\n  # Plot labels if TRUE\n  if (include_lbl) {\n    g &lt;- g +\n      geom_label(aes(label = value_text, size = !! value_expr),\n                 hjust = \"inward\", color = color)\n  }\n  return(g)\n}\ndept_job_role_tbl %&gt;%\n  # Select columnns\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  \n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  # Select columnns\n  plot_attrition(Department, JobRole, .value = cost_of_attrition,\n                 units = \"M\") +\n  labs(\n    title = \"Estimated Cost of Attrition by Job Role\",\n    x = \"Cost of Attrition\",\n    subtitle = \"Looks like Sales Executive and Labaratory Technician are the biggest drivers of cost\"\n  )\n\n\n\n\n\n\n# Step 1: Data Summarization -----\nskim(employee_attrition_tbl)\n\n\nData summary\n\n\nName\nemployee_attrition_tbl\n\n\nNumber of rows\n1470\n\n\nNumber of columns\n35\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n26\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nAttrition\n0\n1\n2\n3\n0\n2\n0\n\n\nBusinessTravel\n0\n1\n10\n17\n0\n3\n0\n\n\nDepartment\n0\n1\n5\n22\n0\n3\n0\n\n\nEducationField\n0\n1\n5\n16\n0\n6\n0\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nJobRole\n0\n1\n7\n25\n0\n9\n0\n\n\nMaritalStatus\n0\n1\n6\n8\n0\n3\n0\n\n\nOver18\n0\n1\n1\n1\n0\n1\n0\n\n\nOverTime\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nAge\n0\n1\n36.92\n9.14\n18\n30.00\n36.0\n43.00\n60\n▂▇▇▃▂\n\n\nDailyRate\n0\n1\n802.49\n403.51\n102\n465.00\n802.0\n1157.00\n1499\n▇▇▇▇▇\n\n\nDistanceFromHome\n0\n1\n9.19\n8.11\n1\n2.00\n7.0\n14.00\n29\n▇▅▂▂▂\n\n\nEducation\n0\n1\n2.91\n1.02\n1\n2.00\n3.0\n4.00\n5\n▂▃▇▆▁\n\n\nEmployeeCount\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁\n\n\nEmployeeNumber\n0\n1\n1024.87\n602.02\n1\n491.25\n1020.5\n1555.75\n2068\n▇▇▇▇▇\n\n\nEnvironmentSatisfaction\n0\n1\n2.72\n1.09\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nHourlyRate\n0\n1\n65.89\n20.33\n30\n48.00\n66.0\n83.75\n100\n▇▇▇▇▇\n\n\nJobInvolvement\n0\n1\n2.73\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▁\n\n\nJobLevel\n0\n1\n2.06\n1.11\n1\n1.00\n2.0\n3.00\n5\n▇▇▃▂▁\n\n\nJobSatisfaction\n0\n1\n2.73\n1.10\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nMonthlyIncome\n0\n1\n6502.93\n4707.96\n1009\n2911.00\n4919.0\n8379.00\n19999\n▇▅▂▁▂\n\n\nMonthlyRate\n0\n1\n14313.10\n7117.79\n2094\n8047.00\n14235.5\n20461.50\n26999\n▇▇▇▇▇\n\n\nNumCompaniesWorked\n0\n1\n2.69\n2.50\n0\n1.00\n2.0\n4.00\n9\n▇▃▂▂▁\n\n\nPercentSalaryHike\n0\n1\n15.21\n3.66\n11\n12.00\n14.0\n18.00\n25\n▇▅▃▂▁\n\n\nPerformanceRating\n0\n1\n3.15\n0.36\n3\n3.00\n3.0\n3.00\n4\n▇▁▁▁▂\n\n\nRelationshipSatisfaction\n0\n1\n2.71\n1.08\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nStandardHours\n0\n1\n80.00\n0.00\n80\n80.00\n80.0\n80.00\n80\n▁▁▇▁▁\n\n\nStockOptionLevel\n0\n1\n0.79\n0.85\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▂▁\n\n\nTotalWorkingYears\n0\n1\n11.28\n7.78\n0\n6.00\n10.0\n15.00\n40\n▇▇▂▁▁\n\n\nTrainingTimesLastYear\n0\n1\n2.80\n1.29\n0\n2.00\n3.0\n3.00\n6\n▂▇▇▂▃\n\n\nWorkLifeBalance\n0\n1\n2.76\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▂\n\n\nYearsAtCompany\n0\n1\n7.01\n6.13\n0\n3.00\n5.0\n9.00\n40\n▇▂▁▁▁\n\n\nYearsInCurrentRole\n0\n1\n4.23\n3.62\n0\n2.00\n3.0\n7.00\n18\n▇▃▂▁▁\n\n\nYearsSinceLastPromotion\n0\n1\n2.19\n3.22\n0\n0.00\n1.0\n3.00\n15\n▇▁▁▁▁\n\n\nYearsWithCurrManager\n0\n1\n4.12\n3.57\n0\n2.00\n3.0\n7.00\n17\n▇▂▅▁▁\n\n\n\n\n# Character Data Type\nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  glimpse()\n\n#&gt; Rows: 1,470\n#&gt; Columns: 9\n#&gt; $ Attrition      &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n#&gt; $ BusinessTravel &lt;chr&gt; \"Travel_Rarely\", \"Travel_Frequently\", \"Travel_Rarely\", …\n#&gt; $ Department     &lt;chr&gt; \"Sales\", \"Research & Development\", \"Research & Developm…\n#&gt; $ EducationField &lt;chr&gt; \"Life Sciences\", \"Life Sciences\", \"Other\", \"Life Scienc…\n#&gt; $ Gender         &lt;chr&gt; \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Fe…\n#&gt; $ JobRole        &lt;chr&gt; \"Sales Executive\", \"Research Scientist\", \"Laboratory Te…\n#&gt; $ MaritalStatus  &lt;chr&gt; \"Single\", \"Married\", \"Single\", \"Married\", \"Married\", \"S…\n#&gt; $ Over18         &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#&gt; $ OverTime       &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No…\n\n# Get \"levels\"\nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  map(unique)\n\n#&gt; $Attrition\n#&gt; [1] \"Yes\" \"No\" \n#&gt; \n#&gt; $BusinessTravel\n#&gt; [1] \"Travel_Rarely\"     \"Travel_Frequently\" \"Non-Travel\"       \n#&gt; \n#&gt; $Department\n#&gt; [1] \"Sales\"                  \"Research & Development\" \"Human Resources\"       \n#&gt; \n#&gt; $EducationField\n#&gt; [1] \"Life Sciences\"    \"Other\"            \"Medical\"          \"Marketing\"       \n#&gt; [5] \"Technical Degree\" \"Human Resources\" \n#&gt; \n#&gt; $Gender\n#&gt; [1] \"Female\" \"Male\"  \n#&gt; \n#&gt; $JobRole\n#&gt; [1] \"Sales Executive\"           \"Research Scientist\"       \n#&gt; [3] \"Laboratory Technician\"     \"Manufacturing Director\"   \n#&gt; [5] \"Healthcare Representative\" \"Manager\"                  \n#&gt; [7] \"Sales Representative\"      \"Research Director\"        \n#&gt; [9] \"Human Resources\"          \n#&gt; \n#&gt; $MaritalStatus\n#&gt; [1] \"Single\"   \"Married\"  \"Divorced\"\n#&gt; \n#&gt; $Over18\n#&gt; [1] \"Y\"\n#&gt; \n#&gt; $OverTime\n#&gt; [1] \"Yes\" \"No\"\n\n# Proportions    \nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  map(~ table(.) %&gt;% prop.table())\n\n#&gt; $Attrition\n#&gt; .\n#&gt;        No       Yes \n#&gt; 0.8387755 0.1612245 \n#&gt; \n#&gt; $BusinessTravel\n#&gt; .\n#&gt;        Non-Travel Travel_Frequently     Travel_Rarely \n#&gt;         0.1020408         0.1884354         0.7095238 \n#&gt; \n#&gt; $Department\n#&gt; .\n#&gt;        Human Resources Research & Development                  Sales \n#&gt;             0.04285714             0.65374150             0.30340136 \n#&gt; \n#&gt; $EducationField\n#&gt; .\n#&gt;  Human Resources    Life Sciences        Marketing          Medical \n#&gt;       0.01836735       0.41224490       0.10816327       0.31564626 \n#&gt;            Other Technical Degree \n#&gt;       0.05578231       0.08979592 \n#&gt; \n#&gt; $Gender\n#&gt; .\n#&gt; Female   Male \n#&gt;    0.4    0.6 \n#&gt; \n#&gt; $JobRole\n#&gt; .\n#&gt; Healthcare Representative           Human Resources     Laboratory Technician \n#&gt;                0.08911565                0.03537415                0.17619048 \n#&gt;                   Manager    Manufacturing Director         Research Director \n#&gt;                0.06938776                0.09863946                0.05442177 \n#&gt;        Research Scientist           Sales Executive      Sales Representative \n#&gt;                0.19863946                0.22176871                0.05646259 \n#&gt; \n#&gt; $MaritalStatus\n#&gt; .\n#&gt;  Divorced   Married    Single \n#&gt; 0.2224490 0.4578231 0.3197279 \n#&gt; \n#&gt; $Over18\n#&gt; .\n#&gt; Y \n#&gt; 1 \n#&gt; \n#&gt; $OverTime\n#&gt; .\n#&gt;        No       Yes \n#&gt; 0.7170068 0.2829932\n\n# Numeric Data\nemployee_attrition_tbl %&gt;%\n  select_if(is.numeric) %&gt;%\n  map(~ unique(.) %&gt;% length())\n\n#&gt; $Age\n#&gt; [1] 43\n#&gt; \n#&gt; $DailyRate\n#&gt; [1] 886\n#&gt; \n#&gt; $DistanceFromHome\n#&gt; [1] 29\n#&gt; \n#&gt; $Education\n#&gt; [1] 5\n#&gt; \n#&gt; $EmployeeCount\n#&gt; [1] 1\n#&gt; \n#&gt; $EmployeeNumber\n#&gt; [1] 1470\n#&gt; \n#&gt; $EnvironmentSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $HourlyRate\n#&gt; [1] 71\n#&gt; \n#&gt; $JobInvolvement\n#&gt; [1] 4\n#&gt; \n#&gt; $JobLevel\n#&gt; [1] 5\n#&gt; \n#&gt; $JobSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $MonthlyIncome\n#&gt; [1] 1349\n#&gt; \n#&gt; $MonthlyRate\n#&gt; [1] 1427\n#&gt; \n#&gt; $NumCompaniesWorked\n#&gt; [1] 10\n#&gt; \n#&gt; $PercentSalaryHike\n#&gt; [1] 15\n#&gt; \n#&gt; $PerformanceRating\n#&gt; [1] 2\n#&gt; \n#&gt; $RelationshipSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $StandardHours\n#&gt; [1] 1\n#&gt; \n#&gt; $StockOptionLevel\n#&gt; [1] 4\n#&gt; \n#&gt; $TotalWorkingYears\n#&gt; [1] 40\n#&gt; \n#&gt; $TrainingTimesLastYear\n#&gt; [1] 7\n#&gt; \n#&gt; $WorkLifeBalance\n#&gt; [1] 4\n#&gt; \n#&gt; $YearsAtCompany\n#&gt; [1] 37\n#&gt; \n#&gt; $YearsInCurrentRole\n#&gt; [1] 19\n#&gt; \n#&gt; $YearsSinceLastPromotion\n#&gt; [1] 16\n#&gt; \n#&gt; $YearsWithCurrManager\n#&gt; [1] 18\n\nemployee_attrition_tbl %&gt;%\n  select_if(is.numeric) %&gt;%\n  map_df(~ unique(.) %&gt;% length()) %&gt;%\n  # Select all columns\n  pivot_longer(everything()) %&gt;%\n  arrange(value) %&gt;%\n  filter(value &lt;= 10)\n\n\n\n  \n\n\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs() \n\n\n\n\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs(aes(color = Attrition), lower = \"blank\", legend = 1,\n          diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5))) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\",\n            text = element_text(size=8),\n            axis.text = element_text(size = 10),\n            axis.title = element_text(size = 10))\n  }\n  \n  return(g)\n  \n}\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,  contains(\"Training\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n1 Challenge 1\nUse your learning from descriptive features and plot_ggpairs() to further investigate the features. Run the functions above according to the features needed. Answer the following questions. Most of the time, you will only need the images from diagonal.\n\n\nWhat can you deduce about the interaction between Monthly Income and Attrition? c\n\n\n\nThose that are leaving the company have a higher Monthly Income\nThat those are staying have a lower Monthly Income\nThose that are leaving have a lower Monthly Income\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition? d\n\n\n\nThose that are leaving the company have a higher Percent Salary Hike\nThose that are staying have a lower Percent Salary Hike\nThose that are leaving have lower Percent Salary Hike\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition? b\n\n\n\nThose that are leaving the company have a higher stock option level\nThose that are staying have a higher stock option level\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition? a\n\n\n\nA higher proportion of those leaving have a low environment satisfaction level\nA higher proportion of those leaving have a high environment satisfaction level\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition b\n\n\n\nThose that are leaving have higher density of 2’s and 3’s\nThose that are staying have a higher density of 2’s and 3’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition? a\n\n\n\nThose that are leaving have a lower density of 3’s and 4’s\nThose that are leaving have a lower density of 1’s and 2’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Over Time and Attrition? a\n\n\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\nThe proportion of those staying that are working Over Time are high compared to those that are not staying\n\n\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition b\n\n\n\nPeople that leave tend to have more annual trainings\nPeople that leave tend to have less annual trainings\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Years At Company and Attrition b\n\n\n\nPeople that leave tend to have more working years at the company\nPeople that leave tend to have less working years at the company\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition? c\n\n\n\nThose that are leaving have more years since last promotion than those that are staying\nThose that are leaving have fewer years since last promotion than those that are staying\nIt’s difficult to deduce anything based on the visualization\n\n\n#Challenge 2\n## Load the training & test dataset\nlibrary(tidyverse)\n# Modeling\nlibrary(parsnip)\n# Pre-processing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n# Modeling Error Metrics\nlibrary(yardstick)\nlibrary(workflows)\nlibrary(tune)\n\nproduct_data &lt;- read_csv(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/product_backorders.csv\")\nproduct_data2 &lt;- product_data %&gt;% \n  mutate(\n    product_backorder = went_on_backorder %&gt;% str_to_lower() %&gt;% str_detect(\"yes\") %&gt;% as.numeric()\n  ) %&gt;% \n  select(-c(went_on_backorder))\nglimpse(product_data)\n\n#&gt; Rows: 19,053\n#&gt; Columns: 23\n#&gt; $ sku               &lt;dbl&gt; 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#&gt; $ national_inv      &lt;dbl&gt; 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#&gt; $ lead_time         &lt;dbl&gt; 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#&gt; $ in_transit_qty    &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#&gt; $ forecast_3_month  &lt;dbl&gt; 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#&gt; $ forecast_6_month  &lt;dbl&gt; 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#&gt; $ forecast_9_month  &lt;dbl&gt; 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#&gt; $ sales_1_month     &lt;dbl&gt; 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#&gt; $ sales_3_month     &lt;dbl&gt; 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#&gt; $ sales_6_month     &lt;dbl&gt; 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#&gt; $ sales_9_month     &lt;dbl&gt; 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#&gt; $ min_bank          &lt;dbl&gt; 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#&gt; $ potential_issue   &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ pieces_past_due   &lt;dbl&gt; 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ perf_6_month_avg  &lt;dbl&gt; 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#&gt; $ perf_12_month_avg &lt;dbl&gt; 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#&gt; $ local_bo_qty      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ deck_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ oe_constraint     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ ppap_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#&gt; $ stop_auto_buy     &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#&gt; $ rev_stop          &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ went_on_backorder &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\nsplit_obj&lt;- initial_split(product_data2, prop = 0.75)\ntrain_tbl&lt;- training(split_obj)\ntest_tbl&lt;- testing(split_obj)\n\n## Specifiy the response and predictor variables\nrecipe_obj &lt;- recipe(product_backorder ~., data = train_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_dummy(all_nominal(),-all_outcomes()) %&gt;%\n  prep()\n\nsummary(recipe_obj)\n\n\n\n  \n\n\nglimpse(bake(recipe_obj,new_data = NULL))\n\n#&gt; Rows: 14,289\n#&gt; Columns: 23\n#&gt; $ sku                 &lt;dbl&gt; 2175465, 1337985, 3137195, 1698880, 2011585, 13617…\n#&gt; $ national_inv        &lt;dbl&gt; 401, 8, 2, 8, 0, 395, 307, 6, 0, 2212, 446, 110, 1…\n#&gt; $ lead_time           &lt;dbl&gt; 8, 8, 8, 8, 2, 5, 2, 4, 8, 2, 8, 8, 12, 8, 8, 8, 1…\n#&gt; $ in_transit_qty      &lt;dbl&gt; 80, 3, 0, 0, 4, 318, 330, 0, 0, 468, 50, 7, 0, 0, …\n#&gt; $ forecast_3_month    &lt;dbl&gt; 504, 44, 0, 0, 4, 1028, 1107, 0, 20, 0, 325, 64, 0…\n#&gt; $ forecast_6_month    &lt;dbl&gt; 1260, 53, 0, 0, 8, 2228, 2001, 0, 33, 0, 643, 157,…\n#&gt; $ forecast_9_month    &lt;dbl&gt; 2016, 65, 0, 0, 16, 3248, 3030, 0, 59, 0, 961, 188…\n#&gt; $ sales_1_month       &lt;dbl&gt; 199, 2, 0, 0, 1, 276, 489, 0, 5, 503, 132, 20, 0, …\n#&gt; $ sales_3_month       &lt;dbl&gt; 741, 9, 0, 0, 9, 1018, 1406, 0, 20, 601, 424, 70, …\n#&gt; $ sales_6_month       &lt;dbl&gt; 1519, 18, 0, 0, 12, 2253, 2456, 0, 40, 722, 683, 1…\n#&gt; $ sales_9_month       &lt;dbl&gt; 2324, 39, 0, 0, 13, 3354, 3270, 0, 58, 801, 5600, …\n#&gt; $ min_bank            &lt;dbl&gt; 166, 0, 0, 0, 0, 190, 406, 1, 3, 158, 181, 52, 1, …\n#&gt; $ pieces_past_due     &lt;dbl&gt; 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8…\n#&gt; $ perf_6_month_avg    &lt;dbl&gt; 0.83, 0.79, 0.82, 0.86, 0.80, 0.99, 0.85, 0.22, 0.…\n#&gt; $ perf_12_month_avg   &lt;dbl&gt; 0.86, 0.66, 0.84, 0.88, 0.82, 0.97, 0.83, 0.15, 0.…\n#&gt; $ local_bo_qty        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ product_backorder   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ potential_issue_Yes &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ deck_risk_Yes       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ oe_constraint_Yes   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ ppap_risk_Yes       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,…\n#&gt; $ stop_auto_buy_Yes   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n#&gt; $ rev_stop_Yes        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\nlibrary(h2o)\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         8 hours 3 minutes \n#&gt;     H2O cluster timezone:       Asia/Kolkata \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 20 days \n#&gt;     H2O cluster name:           H2O_started_from_R_RAFID_drs368 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   0.56 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 42)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"product_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5,\n  stopping_metric = \"mae\", stopping_rounds = 3,\n  stopping_tolerance = 1e-2\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n#&gt; 05:46:57.287: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 05:46:57.287: AutoML: XGBoost is not available; skipping it.\n#&gt; 05:46:57.287: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:46:57.287: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 05:46:57.738: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:46:57.738: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n#&gt; 05:47:03.170: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:03.170: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |====                                                                  |   6%\n#&gt; 05:47:04.610: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:04.610: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |  10%\n#&gt; 05:47:09.275: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:09.275: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  14%\n#&gt; 05:47:13.904: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:13.904: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  19%\n#&gt; 05:47:19.111: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:19.111: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  23%\n#&gt; 05:47:25.80: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:25.80: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=================                                                     |  24%\n#&gt; 05:47:26.869: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:26.869: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==================                                                    |  26%\n#&gt; 05:47:28.967: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:28.967: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  34%\n#&gt; 05:47:36.695: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:36.695: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  37%\n#&gt; 05:47:40.806: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:40.806: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |============================                                          |  39%\n#&gt; 05:47:44.433: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:44.433: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=============================                                         |  41%\n#&gt; 05:47:46.190: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:47:46.190: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  51%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  91%\n  |                                                                            \n  |=================================================================     |  93%\n#&gt; 05:48:48.506: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:48:48.506: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==================================================================    |  95%\n#&gt; 05:48:50.382: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 05:48:50.382: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n\n## View the leaderboard\nautoml_models_h2o@leaderboard \n\n#&gt;                                                 model_id      rmse        mse\n#&gt; 1    StackedEnsemble_AllModels_3_AutoML_2_20230618_54657 0.2302132 0.05299813\n#&gt; 2    StackedEnsemble_AllModels_2_AutoML_2_20230618_54657 0.2306988 0.05322195\n#&gt; 3 StackedEnsemble_BestOfFamily_3_AutoML_2_20230618_54657 0.2311610 0.05343540\n#&gt; 4 StackedEnsemble_BestOfFamily_4_AutoML_2_20230618_54657 0.2314540 0.05357096\n#&gt; 5    StackedEnsemble_AllModels_1_AutoML_2_20230618_54657 0.2325196 0.05406535\n#&gt; 6 StackedEnsemble_BestOfFamily_2_AutoML_2_20230618_54657 0.2339781 0.05474577\n#&gt;         mae     rmsle mean_residual_deviance\n#&gt; 1 0.1230680 0.1615296             0.05299813\n#&gt; 2 0.1249663 0.1620926             0.05322195\n#&gt; 3 0.1247660 0.1622653             0.05343540\n#&gt; 4 0.1239520 0.1625477             0.05357096\n#&gt; 5 0.1263488 0.1629221             0.05406535\n#&gt; 6 0.1267197 0.1634630             0.05474577\n#&gt; \n#&gt; [28 rows x 6 columns]\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    slice_(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n## Predicting using Leader Model\nbest_model &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\npredictions &lt;- h2o.predict(best_model, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#&gt; [1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\nglimpse(predictions_tbl)\n\n#&gt; Rows: 4,764\n#&gt; Columns: 1\n#&gt; $ predict &lt;dbl&gt; 0.57531120, 0.77227807, 0.31960272, 0.23562368, 0.18660249, 0.…\n\n## Save the leader model\nbest_model %&gt;% h2o.saveModel(path = \"StackedEnsemble_AllModels_AutoML_20220603_533865\")\n\n#&gt; [1] \"C:\\\\Users\\\\RAFID\\\\Documents\\\\GitHub\\\\ss23-bdml-Rafidhassan981\\\\content\\\\01_journal\\\\StackedEnsemble_AllModels_AutoML_20220603_533865\\\\StackedEnsemble_AllModels_3_AutoML_2_20230618_54657\""
  },
  {
    "objectID": "content/01_journal/04_ml_perf_meas.html",
    "href": "content/01_journal/04_ml_perf_meas.html",
    "title": "04 Performance Measures",
    "section": "",
    "text": "library(h2o)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(recipes)\nproduct_backorders_tbl  &lt;- read_csv(\"C:/Users/RAFID/Documents/GitHub/ss23-bdml-Rafidhassan981/raw_data/product_backorders.csv\")\nproduct_backorders_tbl &lt;- product_backorders_tbl  %&gt;%\n  mutate_if(is.character, as.factor)\nset.seed(seed = 1113)\nsplit_obj                       &lt;- rsample::initial_split(product_backorders_tbl, prop = 0.85)\ntrain_readable_tbl              &lt;- training(split_obj)\ntest_readable_tbl               &lt;- testing(split_obj)\nrecipe_obj &lt;- recipe(went_on_backorder ~., data = train_readable_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n# Modeling\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         8 hours 34 minutes \n#&gt;     H2O cluster timezone:       Asia/Kolkata \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 20 days \n#&gt;     H2O cluster name:           H2O_started_from_R_RAFID_drs368 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   0.42 GB \n#&gt;     H2O cluster total cores:    8 \n#&gt;     H2O cluster allowed cores:  8 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   4%\n#&gt; 06:17:32.857: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 06:17:32.869: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==============                                                        |  21%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_models_h2o@leaderboard\n\n#&gt;                                                 model_id       auc   logloss\n#&gt; 1                          GBM_1_AutoML_5_20230618_61732 0.9449947 0.1826458\n#&gt; 2 StackedEnsemble_BestOfFamily_1_AutoML_5_20230618_61732 0.9449079 0.1814123\n#&gt; 3 StackedEnsemble_BestOfFamily_2_AutoML_5_20230618_61732 0.9414477 0.1964516\n#&gt; 4                          GBM_4_AutoML_5_20230618_61732 0.9402064 0.2541956\n#&gt; 5                          GBM_3_AutoML_5_20230618_61732 0.9241602 0.2688830\n#&gt; 6                          DRF_1_AutoML_5_20230618_61732 0.9051527 0.3386474\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7324381            0.1382780 0.2344793 0.05498053\n#&gt; 2 0.7326647            0.1384769 0.2344693 0.05497583\n#&gt; 3 0.7276739            0.1425621 0.2403996 0.05779199\n#&gt; 4 0.7352670            0.1450713 0.2700759 0.07294099\n#&gt; 5 0.6368206            0.1679756 0.2793486 0.07803564\n#&gt; 6 0.6223488            0.2062404 0.2588221 0.06698888\n#&gt; \n#&gt; [8 rows x 7 columns]\n\n# Visualize the H2O leaderboard to help with model selection\ndata_transformed_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n  as_tibble() %&gt;%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n  slice(1:15) %&gt;% \n  rownames_to_column(var = \"rowname\") %&gt;%\n  # Visually this step will not change anything\n  # It reorders the factors under the hood\n  mutate(\n    model_id   = as_factor(model_id) %&gt;% reorder(auc),\n    model_type = as.factor(model_type)\n  ) %&gt;% \n  pivot_longer(cols = -c(model_id, model_type, rowname), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %&gt;% \n  mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\ndata_transformed_tbl %&gt;%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\ndeeplearning_grid_01 &lt;- h2o.grid(\n  \n  # See help page for available algos\n  algorithm = \"deeplearning\",\n  \n  # I just use the same as the object\n  grid_id = \"deeplearning_grid_01\",\n  \n  # The following is for ?h2o.deeplearning()\n  # predictor and response variables\n  x = x,\n  y = y,\n  \n  # training and validation frame and crossfold validation\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  \n  # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n  hyper_params = list(\n    # Use some combinations (the first one was the original)\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ngrid &lt;- h2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\ndeeplearning_grid_01_model_1 &lt;- h2o.getModel(grid@model_ids[[1]])\ndeeplearning_grid_01_model_1 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.9235070 0.9038242 0.9076138\n\ndeeplearning_grid_01_model_1 %&gt;%\n  h2o.performance(newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; \n#&gt; MSE:  0.07384565\n#&gt; RMSE:  0.2717456\n#&gt; LogLoss:  0.2880416\n#&gt; Mean Per-Class Error:  0.2101719\n#&gt; AUC:  0.8844454\n#&gt; AUCPR:  0.5595787\n#&gt; Gini:  0.7688907\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2305 209 0.083134  =209/2514\n#&gt; Yes     116 228 0.337209   =116/344\n#&gt; Totals 2421 437 0.113716  =325/2858\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.355455    0.583867 181\n#&gt; 2                       max f2  0.187890    0.665854 252\n#&gt; 3                 max f0point5  0.664852    0.627090  89\n#&gt; 4                 max accuracy  0.664852    0.910077  89\n#&gt; 5                max precision  0.735584    0.762238  66\n#&gt; 6                   max recall  0.000032    1.000000 399\n#&gt; 7              max specificity  0.999300    0.999204   0\n#&gt; 8             max absolute_mcc  0.355455    0.524076 181\n#&gt; 9   max min_per_class_accuracy  0.164242    0.811047 267\n#&gt; 10 max mean_per_class_accuracy  0.187890    0.817049 252\n#&gt; 11                     max tns  0.999300 2512.000000   0\n#&gt; 12                     max fns  0.999300  343.000000   0\n#&gt; 13                     max fps  0.000032 2514.000000 399\n#&gt; 14                     max tps  0.000032  344.000000 399\n#&gt; 15                     max tnr  0.999300    0.999204   0\n#&gt; 16                     max fnr  0.999300    0.997093   0\n#&gt; 17                     max fpr  0.000032    1.000000 399\n#&gt; 18                     max tpr  0.000032    1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\nextract_model &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1)%&gt;% \n  h2o.getModel()\nperformance_h2o &lt;- h2o.performance(extract_model, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as.tibble() \nperformance_tbl %&gt;%\n  filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %&gt;%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n\n\n\n\n\nload_model_performance_metrics &lt;- function(model_id, test_tbl) {\n  \n  model_h2o &lt;- h2o.getModel(model_id)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc)\n  \n}\nleaderboard_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n  as_tibble() %&gt;%\n  slice(1:3)\nmodel_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n  mutate(metrics = map(model_id, load_model_performance_metrics, test_tbl)) %&gt;%\n  rename(AUC = auc) %&gt;%\n  unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    \n    auc  = auc %&gt;%  as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(fpr, tpr, color = model_id, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\nget_model_performance_metrics_recall_precision &lt;- function(model_id, test_tbl) {\n  \n  model_h2o &lt;- h2o.getModel(model_id)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc, precision, recall)\n}\nmodel_metrics_pre_recall_tbl &lt;- leaderboard_tbl %&gt;%\n  mutate(metrics = map(model_id, get_model_performance_metrics_recall_precision, test_tbl)) %&gt;%\n  rename(AUC = auc) %&gt;%\n  unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_pre_recall_tbl %&gt;%\n  mutate(\n    auc  = auc %&gt;%  as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(recall, precision, color = model_id, linetype = auc)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models\"\n  )\n\n\n\n\n\n\nperformance_h2o &lt;- h2o.performance(extract_model, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n  h2o.gainsLift() %&gt;%\n  as.tibble()\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"lift\")) %&gt;%\n  mutate(baseline = cumulative_data_fraction) %&gt;%\n  rename(gain     = cumulative_capture_rate) %&gt;%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\ngain_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\n\n\n\n\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"capture\")) %&gt;%\n  mutate(baseline = 1) %&gt;%\n  rename(lift = cumulative_lift) %&gt;%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\nlift_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\n\n\n\n\n\nlibrary(cowplot)\nlibrary(glue)\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(1:max_models)\n  \n  newdata_tbl &lt;- newdata %&gt;%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      &lt;- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr &lt;- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %&gt;%\n      h2o.metric() %&gt;%\n      as.tibble() %&gt;%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  #1A. ROC Plot\n  \n  p1 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  #1B. Precision vs Recall\n  \n  p2 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n      h2o.gainsLift() %&gt;%\n      as.tibble() %&gt;%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    ) %&gt;%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # cowplot::get_legend extracts a legend from a ggplot object\n  p_legend &lt;- get_legend(p1)\n  # Remove legend from p1\n  p1 &lt;- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title &lt;- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle &lt;- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n  \n}\nautoml_models_h2o@leaderboard %&gt;%\n  plot_h2o_performance(newdata = test_tbl, order_by = \"auc\", \n                       size = 0.5, max_models = 3)"
  }
]